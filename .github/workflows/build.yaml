name: Terraform Infrastructure Pipeline
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
defaults:
  run:
    working-directory: modules/
env:
  GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS_KEY}}
  PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
  GAR_LOCATION: ${{ vars.GAR_LOCATION }}
  GAR_REPO_ID: ${{ vars.GAR_REPO_ID }}
  IMAGE_NAME: ${{ vars.DOCKER_IMAGE_NAME }}
  REGION: ${{ vars.GCP_REGION }}

jobs:
  build:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
    steps:
      - uses: actions/checkout@v3
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2.0.0
        with:
          terraform_version: $TERRAFORM_VERSION
      - name: Setup terraform variables
        id: vars
        run: |
          cat > pipeline.auto.tfvars <<EOF
          prefect_account_id="${{ vars.PREFECT_ACCOUNT_ID }}" 
          prefect_workspace_id="${{ vars.PREFECT_WORKSPACE_ID }}" 
          prefect_api_key="${{ vars.PREFECT_API_KEY }}"
          EOF
      - name: Check formatting of Terraform code
        id: fmt
        run: |
          terraform fmt
      - name: Terraform Init
        id: init
        run: |
          terraform init
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false
        continue-on-error: true
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
  release:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    strategy:
      max-parallel: 4
    steps:
      - uses: actions/checkout@v3
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2.0.0
        with:
          terraform_version: $TERRAFORM_VERSION
      - name: Setup terraform variables
        id: vars
        run: |
          cat > pipeline.auto.tfvars <<EOF
          prefect_account_id="${{ vars.PREFECT_ACCOUNT_ID }}" 
          prefect_workspace_id="${{ vars.PREFECT_WORKSPACE_ID }}" 
          prefect_api_key="${{ vars.PREFECT_API_KEY }}"
          EOF
      - name: Check formatting of Terraform code
        id: fmt
        run: |
          terraform fmt
      - name: Terraform Init
        id: init
        run: |
          terraform init
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false
        continue-on-error: true
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
      - name: Terraform Apply
        id: apply
        run: terraform apply -no-color -input=false --auto-approve
        continue-on-error: true
      - name: Terraform Apply Status
        if: steps.apply.outcome == 'failure'
        run: exit 1
  deploy:
    if: github.event_name == 'workflow_dispatch'
    needs: release
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: /
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: '${{ secrets.GOOGLE_CREDENTIALS }}'

      # Authenticate Docker to Google Cloud Artifact Registry
      - name: Docker Auth
        id: docker-auth
        uses: 'docker/login-action@v1'
        with:
          username: 'oauth2accesstoken'
          password: '${{ steps.auth.outputs.access_token }}'
          registry: '${{ env.GAR_LOCATION }}-docker.pkg.dev'

      - name: Build and Push Container
        run: |-
          docker build -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.GAR_REPO_ID }}/${{ env.IMAGE_NAME }}:latest ./
          docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.GAR_REPO_ID }}/${{ env.IMAGE_NAME }}:latest"

  